  // JSON reference -- use this to figure out plural formats for similar languages

      // http://support.transifex.com/customer/portal/articles/1052801

  // json format here is for notes, following is a plaintext format that
  // appears to be what transifex people want to get in support tickets

  {
    "model": "languages.language",
    "fields": {
      "rule_few": "n mod 10 in 2..4 and n mod 100 not in 11..20",
      "code_aliases": " ",
      "code": "ru",
      "name": "Russian",
      "description": "",
      "pluralequation": "(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)",
      "rule_zero": "",
      "rule_two": "",
      "rule_one": "n mod 10 is 1 and n mod 100 is not 11",
      "rule_other": "everything else",
      "specialchars": "",
      "rule_many": "",
      "nplurals": 3
    }
  },

  {
    "pk": 203,
    "model": "languages.language",
    "fields": {
      "rule_few": null,
      "code_aliases": " et-EE et-ee ",
      "code": "et_EE",
      "name": "Estonian (Estonia)",
      "description": "",
      "pluralequation": "(n != 1)",
      "rule_zero": null,
      "rule_two": null,
      "rule_one": "n is 1",
      "rule_other": "everything else",
      "specialchars": "",
      "rule_many": null,
      "nplurals": 2
    }
  },



name             Southern Saami
code             sma
code_aliases
nplurals         2
pluralequation   (n != 1)
rule_zero
rule_two
rule_one         n is 1
rule_few         
rule_many
rule_other       everything else

name             Kven
code             fkv
code_aliases
nplurals         2
pluralequation   (n != 1)
rule_zero
rule_two
rule_one         n is 1
rule_few         
rule_many
rule_other       everything else

